const test = require('ava')

const { degToRad } = require('../maths/utils')

const geom3 = require('../geometries/geom3')

const { cylinderElliptic } = require('./index')

const comparePolygonsAsPoints = require('../../test/helpers/comparePolygonsAsPoints')

test('cylinderElliptic (defaults)', (t) => {
  const obs = cylinderElliptic()
  const pts = geom3.toPoints(obs)

  t.is(pts.length, 96)
})

test('cylinderElliptic (options)', (t) => {
  // test height
  let obs = cylinderElliptic({ height: 10, segments: 12 })
  let pts = geom3.toPoints(obs)
  let exp = [
    [[0, 0, -5], [0.8660254037844387, 0.49999999999999994, -5], [1, 0, -5]],
    [[0.8660254037844387, 0.49999999999999994, -5], [0.8660254037844387, 0.49999999999999994, 5],
      [1, 0, 5], [1, 0, -5]],
    [[0, 0, 5], [1, 0, 5], [0.8660254037844387, 0.49999999999999994, 5]],
    [[0, 0, -5], [0.5000000000000001, 0.8660254037844386, -5], [0.8660254037844387, 0.49999999999999994, -5]],
    [[0.5000000000000001, 0.8660254037844386, -5], [0.5000000000000001, 0.8660254037844386, 5],
      [0.8660254037844387, 0.49999999999999994, 5], [0.8660254037844387, 0.49999999999999994, -5]],
    [[0, 0, 5], [0.8660254037844387, 0.49999999999999994, 5], [0.5000000000000001, 0.8660254037844386, 5]],
    [[0, 0, -5], [6.123233995736766e-17, 1, -5], [0.5000000000000001, 0.8660254037844386, -5]],
    [[6.123233995736766e-17, 1, -5], [6.123233995736766e-17, 1, 5],
      [0.5000000000000001, 0.8660254037844386, 5], [0.5000000000000001, 0.8660254037844386, -5]],
    [[0, 0, 5], [0.5000000000000001, 0.8660254037844386, 5], [6.123233995736766e-17, 1, 5]],
    [[0, 0, -5], [-0.4999999999999998, 0.8660254037844387, -5], [6.123233995736766e-17, 1, -5]],
    [[-0.4999999999999998, 0.8660254037844387, -5], [-0.4999999999999998, 0.8660254037844387, 5],
      [6.123233995736766e-17, 1, 5], [6.123233995736766e-17, 1, -5]],
    [[0, 0, 5], [6.123233995736766e-17, 1, 5], [-0.4999999999999998, 0.8660254037844387, 5]],
    [[0, 0, -5], [-0.8660254037844387, 0.49999999999999994, -5], [-0.4999999999999998, 0.8660254037844387, -5]],
    [[-0.8660254037844387, 0.49999999999999994, -5], [-0.8660254037844387, 0.49999999999999994, 5],
      [-0.4999999999999998, 0.8660254037844387, 5], [-0.4999999999999998, 0.8660254037844387, -5]],
    [[0, 0, 5], [-0.4999999999999998, 0.8660254037844387, 5], [-0.8660254037844387, 0.49999999999999994, 5]],
    [[0, 0, -5], [-1, 1.2246467991473532e-16, -5], [-0.8660254037844387, 0.49999999999999994, -5]],
    [[-1, 1.2246467991473532e-16, -5], [-1, 1.2246467991473532e-16, 5],
      [-0.8660254037844387, 0.49999999999999994, 5], [-0.8660254037844387, 0.49999999999999994, -5]],
    [[0, 0, 5], [-0.8660254037844387, 0.49999999999999994, 5], [-1, 1.2246467991473532e-16, 5]],
    [[0, 0, -5], [-0.8660254037844386, -0.5000000000000001, -5], [-1, 1.2246467991473532e-16, -5]],
    [[-0.8660254037844386, -0.5000000000000001, -5], [-0.8660254037844386, -0.5000000000000001, 5],
      [-1, 1.2246467991473532e-16, 5], [-1, 1.2246467991473532e-16, -5]],
    [[0, 0, 5], [-1, 1.2246467991473532e-16, 5], [-0.8660254037844386, -0.5000000000000001, 5]],
    [[0, 0, -5], [-0.5000000000000004, -0.8660254037844385, -5], [-0.8660254037844386, -0.5000000000000001, -5]],
    [[-0.5000000000000004, -0.8660254037844385, -5], [-0.5000000000000004, -0.8660254037844385, 5],
      [-0.8660254037844386, -0.5000000000000001, 5], [-0.8660254037844386, -0.5000000000000001, -5]],
    [[0, 0, 5], [-0.8660254037844386, -0.5000000000000001, 5], [-0.5000000000000004, -0.8660254037844385, 5]],
    [[0, 0, -5], [-1.8369701987210297e-16, -1, -5], [-0.5000000000000004, -0.8660254037844385, -5]],
    [[-1.8369701987210297e-16, -1, -5], [-1.8369701987210297e-16, -1, 5],
      [-0.5000000000000004, -0.8660254037844385, 5], [-0.5000000000000004, -0.8660254037844385, -5]],
    [[0, 0, 5], [-0.5000000000000004, -0.8660254037844385, 5], [-1.8369701987210297e-16, -1, 5]],
    [[0, 0, -5], [0.5000000000000001, -0.8660254037844386, -5], [-1.8369701987210297e-16, -1, -5]],
    [[0.5000000000000001, -0.8660254037844386, -5], [0.5000000000000001, -0.8660254037844386, 5],
      [-1.8369701987210297e-16, -1, 5], [-1.8369701987210297e-16, -1, -5]],
    [[0, 0, 5], [-1.8369701987210297e-16, -1, 5], [0.5000000000000001, -0.8660254037844386, 5]],
    [[0, 0, -5], [0.8660254037844384, -0.5000000000000004, -5], [0.5000000000000001, -0.8660254037844386, -5]],
    [[0.8660254037844384, -0.5000000000000004, -5], [0.8660254037844384, -0.5000000000000004, 5],
      [0.5000000000000001, -0.8660254037844386, 5], [0.5000000000000001, -0.8660254037844386, -5]],
    [[0, 0, 5], [0.5000000000000001, -0.8660254037844386, 5], [0.8660254037844384, -0.5000000000000004, 5]],
    [[0, 0, -5], [1, -2.4492935982947064e-16, -5], [0.8660254037844384, -0.5000000000000004, -5]],
    [[1, -2.4492935982947064e-16, -5], [1, -2.4492935982947064e-16, 5],
      [0.8660254037844384, -0.5000000000000004, 5], [0.8660254037844384, -0.5000000000000004, -5]],
    [[0, 0, 5], [0.8660254037844384, -0.5000000000000004, 5], [1, -2.4492935982947064e-16, 5]]
  ]

  t.is(pts.length, 36)
  t.true(comparePolygonsAsPoints(pts, exp))

  // test startRadius and endRadius
  obs = cylinderElliptic({ startRadius: [1, 2], endRadius: [2, 1], segments: 12 })
  pts = geom3.toPoints(obs)
  exp = [
    [[0, 0, -1], [0.8660254037844387, 0.9999999999999999, -1], [1, 0, -1]],
    [[1, 0, -1], [0.8660254037844387, 0.9999999999999999, -1], [2, 0, 1]],
    [[0, 0, 1], [2, 0, 1], [1.7320508075688774, 0.49999999999999994, 1]],
    [[2, 0, 1], [0.8660254037844387, 0.9999999999999999, -1], [1.7320508075688774, 0.49999999999999994, 1]],
    [[0, 0, -1], [0.5000000000000001, 1.7320508075688772, -1], [0.8660254037844387, 0.9999999999999999, -1]],
    [[0.8660254037844387, 0.9999999999999999, -1], [0.5000000000000001, 1.7320508075688772, -1], [1.7320508075688774, 0.49999999999999994, 1]],
    [[0, 0, 1], [1.7320508075688774, 0.49999999999999994, 1], [1.0000000000000002, 0.8660254037844386, 1]],
    [[1.7320508075688774, 0.49999999999999994, 1], [0.5000000000000001, 1.7320508075688772, -1], [1.0000000000000002, 0.8660254037844386, 1]],
    [[0, 0, -1], [6.123233995736766e-17, 2, -1], [0.5000000000000001, 1.7320508075688772, -1]],
    [[0.5000000000000001, 1.7320508075688772, -1], [6.123233995736766e-17, 2, -1], [1.0000000000000002, 0.8660254037844386, 1]],
    [[0, 0, 1], [1.0000000000000002, 0.8660254037844386, 1], [1.2246467991473532e-16, 1, 1]],
    [[1.0000000000000002, 0.8660254037844386, 1], [6.123233995736766e-17, 2, -1], [1.2246467991473532e-16, 1, 1]],
    [[0, 0, -1], [-0.4999999999999998, 1.7320508075688774, -1], [6.123233995736766e-17, 2, -1]],
    [[6.123233995736766e-17, 2, -1], [-0.4999999999999998, 1.7320508075688774, -1], [1.2246467991473532e-16, 1, 1]],
    [[0, 0, 1], [1.2246467991473532e-16, 1, 1], [-0.9999999999999996, 0.8660254037844387, 1]],
    [[1.2246467991473532e-16, 1, 1], [-0.4999999999999998, 1.7320508075688774, -1], [-0.9999999999999996, 0.8660254037844387, 1]],
    [[0, 0, -1], [-0.8660254037844387, 0.9999999999999999, -1], [-0.4999999999999998, 1.7320508075688774, -1]],
    [[-0.4999999999999998, 1.7320508075688774, -1], [-0.8660254037844387, 0.9999999999999999, -1], [-0.9999999999999996, 0.8660254037844387, 1]],
    [[0, 0, 1], [-0.9999999999999996, 0.8660254037844387, 1], [-1.7320508075688774, 0.49999999999999994, 1]],
    [[-0.9999999999999996, 0.8660254037844387, 1], [-0.8660254037844387, 0.9999999999999999, -1], [-1.7320508075688774, 0.49999999999999994, 1]],
    [[0, 0, -1], [-1, 2.4492935982947064e-16, -1], [-0.8660254037844387, 0.9999999999999999, -1]],
    [[-0.8660254037844387, 0.9999999999999999, -1], [-1, 2.4492935982947064e-16, -1], [-1.7320508075688774, 0.49999999999999994, 1]],
    [[0, 0, 1], [-1.7320508075688774, 0.49999999999999994, 1], [-2, 1.2246467991473532e-16, 1]],
    [[-1.7320508075688774, 0.49999999999999994, 1], [-1, 2.4492935982947064e-16, -1], [-2, 1.2246467991473532e-16, 1]],
    [[0, 0, -1], [-0.8660254037844386, -1.0000000000000002, -1], [-1, 2.4492935982947064e-16, -1]],
    [[-1, 2.4492935982947064e-16, -1], [-0.8660254037844386, -1.0000000000000002, -1], [-2, 1.2246467991473532e-16, 1]],
    [[0, 0, 1], [-2, 1.2246467991473532e-16, 1], [-1.7320508075688772, -0.5000000000000001, 1]],
    [[-2, 1.2246467991473532e-16, 1], [-0.8660254037844386, -1.0000000000000002, -1], [-1.7320508075688772, -0.5000000000000001, 1]],
    [[0, 0, -1], [-0.5000000000000004, -1.732050807568877, -1], [-0.8660254037844386, -1.0000000000000002, -1]],
    [[-0.8660254037844386, -1.0000000000000002, -1], [-0.5000000000000004, -1.732050807568877, -1], [-1.7320508075688772, -0.5000000000000001, 1]],
    [[0, 0, 1], [-1.7320508075688772, -0.5000000000000001, 1], [-1.0000000000000009, -0.8660254037844385, 1]],
    [[-1.7320508075688772, -0.5000000000000001, 1], [-0.5000000000000004, -1.732050807568877, -1], [-1.0000000000000009, -0.8660254037844385, 1]],
    [[0, 0, -1], [-1.8369701987210297e-16, -2, -1], [-0.5000000000000004, -1.732050807568877, -1]],
    [[-0.5000000000000004, -1.732050807568877, -1], [-1.8369701987210297e-16, -2, -1], [-1.0000000000000009, -0.8660254037844385, 1]],
    [[0, 0, 1], [-1.0000000000000009, -0.8660254037844385, 1], [-3.6739403974420594e-16, -1, 1]],
    [[-1.0000000000000009, -0.8660254037844385, 1], [-1.8369701987210297e-16, -2, -1], [-3.6739403974420594e-16, -1, 1]],
    [[0, 0, -1], [0.5000000000000001, -1.7320508075688772, -1], [-1.8369701987210297e-16, -2, -1]],
    [[-1.8369701987210297e-16, -2, -1], [0.5000000000000001, -1.7320508075688772, -1], [-3.6739403974420594e-16, -1, 1]],
    [[0, 0, 1], [-3.6739403974420594e-16, -1, 1], [1.0000000000000002, -0.8660254037844386, 1]],
    [[-3.6739403974420594e-16, -1, 1], [0.5000000000000001, -1.7320508075688772, -1], [1.0000000000000002, -0.8660254037844386, 1]],
    [[0, 0, -1], [0.8660254037844384, -1.0000000000000009, -1], [0.5000000000000001, -1.7320508075688772, -1]],
    [[0.5000000000000001, -1.7320508075688772, -1], [0.8660254037844384, -1.0000000000000009, -1], [1.0000000000000002, -0.8660254037844386, 1]],
    [[0, 0, 1], [1.0000000000000002, -0.8660254037844386, 1], [1.7320508075688767, -0.5000000000000004, 1]],
    [[1.0000000000000002, -0.8660254037844386, 1], [0.8660254037844384, -1.0000000000000009, -1], [1.7320508075688767, -0.5000000000000004, 1]],
    [[0, 0, -1], [1, -4.898587196589413e-16, -1], [0.8660254037844384, -1.0000000000000009, -1]],
    [[0.8660254037844384, -1.0000000000000009, -1], [1, -4.898587196589413e-16, -1], [1.7320508075688767, -0.5000000000000004, 1]],
    [[0, 0, 1], [1.7320508075688767, -0.5000000000000004, 1], [2, -2.4492935982947064e-16, 1]],
    [[1.7320508075688767, -0.5000000000000004, 1], [1, -4.898587196589413e-16, -1], [2, -2.4492935982947064e-16, 1]]
  ]

  t.is(pts.length, 48)
  t.true(comparePolygonsAsPoints(pts, exp))

  // test startAngle and endAngle
  obs = cylinderElliptic({ startRadius: [1, 2], endRadius: [2, 1], startAngle: degToRad(90), endAngle: degToRad(270), segments: 12 })
  pts = geom3.toPoints(obs)
  exp = [
  ]

  t.is(pts.length, 28)
  // t.true(comparePolygonsAsPoints(pts, exp))

  // test segments
  obs = cylinderElliptic({ segments: 8 })
  pts = geom3.toPoints(obs)

  t.is(pts.length, 24)
})
