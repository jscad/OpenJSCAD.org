const test = require('ava')

const { geom2, path2 } = require('../../geometry')

const { offset } = require('./index')

const { comparePoints } = require('../../../test/helpers')

test('offset (corners: chamfer): offset of a path2 produces expected offset path2', t => {
  let openline = path2.fromPoints({ }, [[0, 0], [5, 0], [0, 5]])
  let closeline = path2.fromPoints({ }, [[0, 0], [5, 0], [0, 5], [0, 0]])

  // empty path2
  let empty = path2.create()
  let obs = offset({ delta: 1 }, empty)
  let pts = path2.toPoints(obs)
  let exp = [
  ]
  t.true(comparePoints(pts, exp))

  // expand +
  obs = offset({ delta: 1, corners: 'chamfer' }, openline)
  pts = path2.toPoints(obs)
  exp = [
    [ -6.123234262925839e-17, -1 ],
    [ 5, -1 ],
    [ 5.707106590270996, 0.7071067690849304 ],
    [ 0.7071067690849304, 5.707106590270996 ]
  ]
  t.true(comparePoints(pts, exp))

  obs = offset({ delta: 1, corners: 'chamfer' }, closeline)
  pts = path2.toPoints(obs)
  exp = [
    [ -6.123234262925839e-17, -1 ],
    [ 5, -1 ],
    [ 5.707106590270996, 0.7071067690849304 ],
    [ 0.7071067690849304, 5.707106590270996 ],
    [ -1, 5 ],
    [ -1, 6.123234262925839e-17 ]
  ]
  t.true(comparePoints(pts, exp))

  // contract -
  obs = offset({ delta: -1, corners: 'chamfer' }, openline)
  pts = path2.toPoints(obs)
  exp = [
    [ 6.123234262925839e-17, 1 ],
    [ 2.5857865810394287, 1 ],
    [ -0.7071067690849304, 4.292893409729004 ]
  ]
  t.true(comparePoints(pts, exp))

  obs = offset({ delta: -1, corners: 'chamfer' }, closeline)
  pts = path2.toPoints(obs)
  exp = [
    [ 1, 1 ],
    [ 2.5857865810394287, 1 ],
    [ 1, 2.5857865810394287 ]
  ]
  t.true(comparePoints(pts, exp))
})

test('offset (corners: edge): offset of a path2 produces expected offset path2', t => {
  let openline = path2.fromPoints({ }, [[-5, -5], [5, -5], [5, 5], [3, 5], [3, 0], [-3, 0], [-3, 5], [-5, 5]])
  let closeline = path2.fromPoints({ }, [[-5, -5], [5, -5], [5, 5], [3, 5], [3, 0], [-3, 0], [-3, 5], [-5, 5], [-5, -5]])

  let obs = offset({ delta: 1, corners: 'edge' }, openline)
  let pts = path2.toPoints(obs)
  let exp = [
    [ -5, -6 ],
    [ 5, -6 ],
    [ 6, -6 ],
    [ 6, -5 ],
    [ 6, 5 ],
    [ 6, 6 ],
    [ 5, 6 ],
    [ 3, 6 ],
    [ 2, 6 ],
    [ 2, 5 ],
    [ 2, 1 ],
    [ -2, 1 ],
    [ -2, 5 ],
    [ -2, 6 ],
    [ -3, 6 ],
    [ -5, 6 ]
  ]
  t.true(comparePoints(pts, exp))

  obs = offset({ delta: 1, corners: 'edge' }, closeline)
  pts = path2.toPoints(obs)
  exp = [
    [ -6, -6 ],
    [ -5, -6 ],
    [ 5, -6 ],
    [ 6, -6 ],
    [ 6, -5 ],
    [ 6, 5 ],
    [ 6, 6 ],
    [ 5, 6 ],
    [ 3, 6 ],
    [ 2, 6 ],
    [ 2, 5 ],
    [ 2, 1 ],
    [ -2, 1 ],
    [ -2, 5 ],
    [ -2, 6 ],
    [ -3, 6 ],
    [ -5, 6 ],
    [ -6, 6 ],
    [ -6, 5 ],
    [ -6, -5 ]
  ]
  t.true(comparePoints(pts, exp))

  obs = offset({ delta: -0.5, corners: 'edge' }, openline)
  pts = path2.toPoints(obs)
  exp = [
    [ -5, -4.5 ],
    [ 4.5, -4.5 ],
    [ 4.5, 4.5 ],
    [ 3.5, 4.5 ],
    [ 3.5, -3.0616171314629196e-17 ],
    [ 3.5, -0.5 ],
    [ 3, -0.5 ],
    [ -3, -0.5 ],
    [ -3.5, -0.5 ],
    [ -3.5, 3.0616171314629196e-17 ],
    [ -3.5, 4.5 ],
    [ -5, 4.5 ]
  ]
  t.true(comparePoints(pts, exp))

  obs = offset({ delta: -0.5, corners: 'edge' }, closeline)
  pts = path2.toPoints(obs)
  exp = [
    [ -4.5, -4.5 ],
    [ 4.5, -4.5 ],
    [ 4.5, 4.5 ],
    [ 3.5, 4.5 ],
    [ 3.5, -3.0616171314629196e-17 ],
    [ 3.5, -0.5 ],
    [ 3, -0.5 ],
    [ -3, -0.5 ],
    [ -3.5, -0.5 ],
    [ -3.5, 3.0616171314629196e-17 ],
    [ -3.5, 4.5 ],
    [ -4.5, 4.5 ]
  ]
  t.true(comparePoints(pts, exp))
})

test('offset (corners: round): offset of a path2 produces expected offset path2', t => {
  let openline = path2.fromPoints({ }, [[-5, -5], [5, -5], [5, 5], [3, 5], [3, 0], [-3, 0], [-3, 5], [-5, 5]])
  let closeline = path2.fromPoints({ }, [[-5, -5], [5, -5], [5, 5], [3, 5], [3, 0], [-3, 0], [-3, 5], [-5, 5], [-5, -5]])

  let obs = offset({ delta: 1, corners: 'round', segments: 16 }, openline)
  let pts = path2.toPoints(obs)
  let exp = [
    [ -5, -6 ],
    [ 5, -6 ],
    [ 5.382683277130127, -5.923879623413086 ],
    [ 5.707106590270996, -5.707106590270996 ],
    [ 5.923879623413086, -5.382683277130127 ],
    [ 6, -5 ],
    [ 6, 5 ],
    [ 5.923879623413086, 5.382683277130127 ],
    [ 5.707106590270996, 5.707106590270996 ],
    [ 5.382683277130127, 5.923879623413086 ],
    [ 5, 6 ],
    [ 3, 6 ],
    [ 2.617316484451294, 5.923879623413086 ],
    [ 2.292893171310425, 5.707106590270996 ],
    [ 2.076120376586914, 5.382683277130127 ],
    [ 2, 5 ],
    [ 2, 1 ],
    [ -2, 1 ],
    [ -2, 5 ],
    [ -2.076120376586914, 5.382683277130127 ],
    [ -2.292893171310425, 5.707106590270996 ],
    [ -2.617316484451294, 5.923879623413086 ],
    [ -3, 6 ],
    [ -5, 6 ]
  ]
  t.true(comparePoints(pts, exp))

  obs = offset({ delta: 1, corners: 'round', segments: 16 }, closeline)
  pts = path2.toPoints(obs)
  exp = [
    [ -5.923879623413086, -5.382683277130127 ],
    [ -5.707106590270996, -5.707106590270996 ],
    [ -5.382683277130127, -5.923879623413086 ],
    [ -5, -6 ],
    [ 5, -6 ],
    [ 5.382683277130127, -5.923879623413086 ],
    [ 5.707106590270996, -5.707106590270996 ],
    [ 5.923879623413086, -5.382683277130127 ],
    [ 6, -5 ],
    [ 6, 5 ],
    [ 5.923879623413086, 5.382683277130127 ],
    [ 5.707106590270996, 5.707106590270996 ],
    [ 5.382683277130127, 5.923879623413086 ],
    [ 5, 6 ],
    [ 3, 6 ],
    [ 2.617316484451294, 5.923879623413086 ],
    [ 2.292893171310425, 5.707106590270996 ],
    [ 2.076120376586914, 5.382683277130127 ],
    [ 2, 5 ],
    [ 2, 1 ],
    [ -2, 1 ],
    [ -2, 5 ],
    [ -2.076120376586914, 5.382683277130127 ],
    [ -2.292893171310425, 5.707106590270996 ],
    [ -2.617316484451294, 5.923879623413086 ],
    [ -3, 6 ],
    [ -5, 6 ],
    [ -5.382683277130127, 5.923879623413086 ],
    [ -5.707106590270996, 5.707106590270996 ],
    [ -5.923879623413086, 5.382683277130127 ],
    [ -6, 5 ],
    [ -6, -5 ]
  ]
  t.true(comparePoints(pts, exp))
})

test('offset (corners: round): offset of a CW path2 produces expected offset path2', t => {
  let openline = path2.fromPoints({ }, [[-5, -5], [5, -5], [5, 5], [3, 5], [3, 0], [-3, 0], [-3, 5], [-5, 5]].reverse())
  let closeline = path2.fromPoints({ }, [[-5, -5], [5, -5], [5, 5], [3, 5], [3, 0], [-3, 0], [-3, 5], [-5, 5], [-5, -5]].reverse())

  let obs = offset({ delta: -0.5, corners: 'round', segments: 16 }, openline)
  let pts = path2.toPoints(obs)
  let exp = [
    [ -5, 4.5 ],
    [ -3.5, 4.5 ],
    [ -3.5, 3.0616171314629196e-17 ],
    [ -3.461939811706543, -0.19134171307086945 ],
    [ -3.353553295135498, -0.3535533845424652 ],
    [ -3.1913416385650635, -0.4619397521018982 ],
    [ -3, -0.5 ],
    [ 3, -0.5 ],
    [ 3.1913416385650635, -0.4619397521018982 ],
    [ 3.353553295135498, -0.3535533845424652 ],
    [ 3.461939811706543, -0.19134171307086945 ],
    [ 3.5, -3.0616171314629196e-17 ],
    [ 3.5, 4.5 ],
    [ 4.5, 4.5 ],
    [ 4.5, -4.5 ],
    [ -5, -4.5 ]
  ]
  t.true(comparePoints(pts, exp))

  obs = offset({ delta: 1, corners: 'round', segments: 16 }, closeline)
  pts = path2.toPoints(obs)
  exp = [
    [ -5.382683277130127, -5.923879623413086 ],
    [ -5.707106590270996, -5.707106590270996 ],
    [ -5.923879623413086, -5.382683277130127 ],
    [ -6, -5 ],
    [ -6, 5 ],
    [ -5.923879623413086, 5.382683277130127 ],
    [ -5.707106590270996, 5.707106590270996 ],
    [ -5.382683277130127, 5.923879623413086 ],
    [ -5, 6 ],
    [ -3, 6 ],
    [ -2.617316484451294, 5.923879623413086 ],
    [ -2.292893171310425, 5.707106590270996 ],
    [ -2.076120376586914, 5.382683277130127 ],
    [ -2, 5 ],
    [ -2, 1 ],
    [ 2, 1 ],
    [ 2, 5 ],
    [ 2.076120376586914, 5.382683277130127 ],
    [ 2.292893171310425, 5.707106590270996 ],
    [ 2.617316484451294, 5.923879623413086 ],
    [ 3, 6 ],
    [ 5, 6 ],
    [ 5.382683277130127, 5.923879623413086 ],
    [ 5.707106590270996, 5.707106590270996 ],
    [ 5.923879623413086, 5.382683277130127 ],
    [ 6, 5 ],
    [ 6, -5 ],
    [ 5.923879623413086, -5.382683277130127 ],
    [ 5.707106590270996, -5.707106590270996 ],
    [ 5.382683277130127, -5.923879623413086 ],
    [ 5, -6 ],
    [ -5, -6 ]
  ]
  t.true(comparePoints(pts, exp))
})

test('offset (options): offsetting of a simple geom2 produces expected offset geom2', t => {
  let geometry = geom2.fromPoints([[-5, -5], [5, -5], [5, 5], [3, 5], [3, 0], [-3, 0], [-3, 5], [-5, 5]])

  // empty
  let empty = geom2.create()
  let obs = offset({ delta: 1 }, empty)
  let pts = geom2.toPoints(obs)
  let exp = [
  ]
  t.true(comparePoints(pts, exp))

  // expand +
  obs = offset({ delta: 1, corners: 'round' }, geometry)
  pts = geom2.toPoints(obs)
  exp = [
    [ -5, -6 ],
    [ 5, -6 ],
    [ 6, -5 ],
    [ 6, 5 ],
    [ 5, 6 ],
    [ 3, 6 ],
    [ 2, 5 ],
    [ 2, 1 ],
    [ -2, 1 ],
    [ -2, 5 ],
    [ -3, 6 ],
    [ -5, 6 ],
    [ -6, 5 ],
    [ -6, -5 ]
  ]
  t.true(comparePoints(pts, exp))

  // contract -
  obs = offset({ delta: -0.5, corners: 'round' }, geometry)
  pts = geom2.toPoints(obs)
  exp = [
    [ -4.5, -4.5 ],
    [ 4.5, -4.5 ],
    [ 4.5, 4.5 ],
    [ 3.5, 4.5 ],
    [ 3.5, -3.0616171314629196e-17 ],
    [ 3, -0.5 ],
    [ -3, -0.5 ],
    [ -3.5, 3.0616171314629196e-17 ],
    [ -3.5, 4.5 ],
    [ -4.5, 4.5 ]
  ]
  t.true(comparePoints(pts, exp))

  // segments 1 - sharp points at corner
  obs = offset({ delta: 1, corners: 'edge' }, geometry)
  pts = geom2.toPoints(obs)
  exp = [
    [ -6, -6 ],
    [ -5, -6 ],
    [ 5, -6 ],
    [ 6, -6 ],
    [ 6, -5 ],
    [ 6, 5 ],
    [ 6, 6 ],
    [ 5, 6 ],
    [ 3, 6 ],
    [ 2, 6 ],
    [ 2, 5 ],
    [ 2, 1 ],
    [ -2, 1 ],
    [ -2, 5 ],
    [ -2, 6 ],
    [ -3, 6 ],
    [ -5, 6 ],
    [ -6, 6 ],
    [ -6, 5 ],
    [ -6, -5 ]
  ]
  t.true(comparePoints(pts, exp))

  // segments 16 - rounded corners
  obs = offset({ delta: -0.5, corners: 'round', segments: 16 }, geometry)
  pts = geom2.toPoints(obs)
  exp = [
    [ -4.5, -4.5 ],
    [ 4.5, -4.5 ],
    [ 4.5, 4.5 ],
    [ 3.5, 4.5 ],
    [ 3.5, -3.0616171314629196e-17 ],
    [ 3.461939811706543, -0.19134171307086945 ],
    [ 3.353553295135498, -0.3535533845424652 ],
    [ 3.1913416385650635, -0.4619397521018982 ],
    [ 3, -0.5 ],
    [ -3, -0.5 ],
    [ -3.1913416385650635, -0.4619397521018982 ],
    [ -3.353553295135498, -0.3535533845424652 ],
    [ -3.461939811706543, -0.19134171307086945 ],
    [ -3.5, 3.0616171314629196e-17 ],
    [ -3.5, 4.5 ],
    [ -4.5, 4.5 ]
  ]
  t.true(comparePoints(pts, exp))
})

test('offset (options): offsetting of a complex geom2 produces expected offset geom2', t => {
  let geometry = geom2.create([
    [[-75.00000, 75.00000], [-75.00000, -75.00000]],
    [[-75.00000, -75.00000], [75.00000, -75.00000]],
    [[75.00000, -75.00000], [75.00000, 75.00000]],
    [[-40.00000, 75.00000], [-75.00000, 75.00000]],
    [[75.00000, 75.00000], [40.00000, 75.00000]],
    [[40.00000, 75.00000], [40.00000, 0.00000]],
    [[40.00000, 0.00000], [-40.00000, 0.00000]],
    [[-40.00000, 0.00000], [-40.00000, 75.00000]],
    [[15.00000, -10.00000], [15.00000, -40.00000]],
    [[-15.00000, -10.00000], [15.00000, -10.00000]],
    [[-15.00000, -40.00000], [-15.00000, -10.00000]],
    [[-8.00000, -40.00000], [-15.00000, -40.00000]],
    [[15.00000, -40.00000], [8.00000, -40.00000]],
    [[-8.00000, -25.00000], [-8.00000, -40.00000]],
    [[8.00000, -25.00000], [-8.00000, -25.00000]],
    [[8.00000, -40.00000], [8.00000, -25.00000]],
    [[-2.00000, -15.00000], [-2.00000, -19.00000]],
    [[-2.00000, -19.00000], [2.00000, -19.00000]],
    [[2.00000, -19.00000], [2.00000, -15.00000]],
    [[2.00000, -15.00000], [-2.00000, -15.00000]]
  ])

  // expand +
  let obs = offset({ delta: 2, corners: 'edge' }, geometry)
  let pts = geom2.toPoints(obs)
  let exp = [
    [ -77, -77 ],
    [ -75, -77 ],
    [ 75, -77 ],
    [ 77, -77 ],
    [ 77, -75 ],
    [ 77, 75 ],
    [ 77, 77 ],
    [ 75, 77 ],
    [ 40, 77 ],
    [ 38, 77 ],
    [ 38, 75 ],
    [ 38, 2 ],
    [ -38, 2 ],
    [ -38, 75 ],
    [ -38, 77 ],
    [ -40, 77 ],
    [ -75, 77 ],
    [ -77, 77 ],
    [ -77, 75 ],
    [ 13, -12 ],
    [ 13, -38 ],
    [ 10, -38 ],
    [ 10, -25 ],
    [ 10, -23 ],
    [ 8, -23 ],
    [ -8, -23 ],
    [ -10, -23 ],
    [ -10, -25 ],
    [ -10, -38 ],
    [ -13, -38 ],
    [ -13, -12 ],
    [ -4, -19 ],
    [ -4, -21 ],
    [ -2, -21 ],
    [ 2, -21 ],
    [ 4, -21 ],
    [ 4, -19 ],
    [ 4, -15 ],
    [ 4, -13 ],
    [ 2, -13 ],
    [ -2, -13 ],
    [ -4, -13 ],
    [ -4, -15 ],
    [ -77, -75 ]
  ]
  t.is(pts.length, 44)
  t.true(comparePoints(pts, exp))
})

test('offset (options): offsetting of round geom2 produces expected offset geom2', t => {
  let geometry = geom2.fromPoints([
    [10.00000, 0.00000],
    [9.23880, 3.82683],
    [7.07107, 7.07107],
    [3.82683, 9.23880],
    [0.00000, 10.00000],
    [-3.82683, 9.23880],
    [-7.07107, 7.07107],
    [-9.23880, 3.82683],
    [-10.00000, 0.00000],
    [-9.23880, -3.82683],
    [-7.07107, -7.07107],
    [-3.82683, -9.23880],
    [-0.00000, -10.00000],
    [3.82683, -9.23880],
    [7.07107, -7.07107],
    [9.23880, -3.82683]
  ])

  let obs = offset({ delta: -0.5, corners: 'round' }, geometry)
  let pts = geom2.toPoints(obs)
  let exp = [
    [ 9.490204811096191, 0 ],
    [ 8.767810821533203, 3.631739377975464 ],
    [ 6.710590362548828, 6.710590362548828 ],
    [ 3.631739377975464, 8.767810821533203 ],
    [ 0, 9.490204811096191 ],
    [ -3.631739377975464, 8.767810821533203 ],
    [ -6.710590362548828, 6.710590362548828 ],
    [ -8.767810821533203, 3.631739377975464 ],
    [ -9.490204811096191, 0 ],
    [ -8.767810821533203, -3.631739377975464 ],
    [ -6.710590362548828, -6.710590362548828 ],
    [ -3.631739377975464, -8.767810821533203 ],
    [ 0, -9.490204811096191 ],
    [ 3.631739377975464, -8.767810821533203 ],
    [ 6.710590362548828, -6.710590362548828 ],
    [ 8.767810821533203, -3.631739377975464 ]
  ]
  t.is(pts.length, 16)
  t.true(comparePoints(pts, exp))
})
