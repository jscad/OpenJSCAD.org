const test = require('ava')

const { comparePoints } = require('../../../test/helpers')

const { geom2, geom3, path2 } = require('../../geometries')

const { expand } = require('./index')

test('expand: expanding of a path2 produces an expected geom2', (t) => {
  const points = [
    [10, 0],
    [9.510565162951535, 3.090169943749474],
    [8.090169943749475, 5.877852522924732],
    [5.877852522924732, 8.090169943749475],
    [3.0901699437494745, 9.510565162951535],
    [6.123233995736766e-16, 10]
  ]
  let geometry = path2.fromPoints({ }, points)

  // test counter clock wise winding paths
  let obs = expand({ delta: 2, corners: 'round', segments: 8 }, geometry)
  let pts = geom2.toPoints(obs)
  let exp = [
    [11.975376681190276, 0.31286893008046235],
    [11.48594184414181, 3.4030388738299364],
    [11.292578211328271, 3.9981509432285667],
    [9.872182992126211, 6.785833522403824],
    [9.504383506122569, 7.292066085297827],
    [7.292066085297827, 9.504383506122569],
    [6.785833522403824, 9.872182992126211],
    [3.9981509432285676, 11.292578211328271],
    [3.403038873829937, 11.48594184414181],
    [0.3128689300804632, 11.975376681190276],
    [-1.1755705045849454, 11.618033988749895],
    [-1.9753766811902747, 10.312868930080462],
    [-1.6180339887498942, 8.824429495415053],
    [-0.31286893008046196, 8.024623318809724],
    [2.4644320835885507, 7.584742052146989],
    [4.6876283841274695, 6.451966957800547],
    [6.451966957800547, 4.6876283841274695],
    [7.584742052146989, 2.4644320835885507],
    [8.024623318809724, -0.31286893008046235],
    [8.824429495415053, -1.618033988749895],
    [10.312868930080462, -1.9753766811902755],
    [11.618033988749895, -1.1755705045849463]
  ]
  t.is(pts.length, 22)
  t.true(comparePoints(pts, exp))

  // test clock wise winding paths
  geometry = path2.fromPoints({ }, points.reverse())
  obs = expand({ delta: 2, corners: 'round', segments: 8 }, geometry)
  pts = geom2.toPoints(obs)
  exp = [
    [0.3128689300804632, 11.975376681190276],
    [3.403038873829937, 11.48594184414181],
    [3.9981509432285676, 11.292578211328271],
    [6.785833522403824, 9.872182992126211],
    [7.292066085297827, 9.504383506122569],
    [9.504383506122569, 7.292066085297827],
    [9.872182992126211, 6.785833522403824],
    [11.292578211328271, 3.9981509432285667],
    [11.48594184414181, 3.4030388738299364],
    [11.975376681190276, 0.31286893008046235],
    [11.618033988749895, -1.1755705045849458],
    [10.312868930080462, -1.9753766811902753],
    [8.824429495415053, -1.618033988749895],
    [8.024623318809724, -0.31286893008046235],
    [7.584742052146989, 2.4644320835885507],
    [6.451966957800547, 4.6876283841274695],
    [4.6876283841274695, 6.451966957800547],
    [2.4644320835885503, 7.584742052146989],
    [-0.31286893008046196, 8.024623318809724],
    [-1.6180339887498947, 8.824429495415055],
    [-1.9753766811902747, 10.312868930080462],
    [-1.1755705045849458, 11.618033988749895]
  ]
  t.is(pts.length, 22)
  t.true(comparePoints(pts, exp))
})

test('expand: expanding of a geom2 produces expected changes to points', (t) => {
  const geometry = geom2.fromPoints([[-8, -8], [8, -8], [8, 8], [-8, 8]])

  const obs = expand({ delta: 2, corners: 'round', segments: 8 }, geometry)
  const pts = geom2.toPoints(obs)
  const exp = [
    [-9.414213562373096, -9.414213562373096],
    [-8, -10],
    [8, -10],
    [9.414213562373096, -9.414213562373096],
    [10, -8],
    [10, 8],
    [9.414213562373096, 9.414213562373096],
    [8, 10],
    [-8, 10],
    [-9.414213562373096, 9.414213562373096],
    [-10, 8],
    [-10, -8]
  ]
  t.is(pts.length, 12)
  t.true(comparePoints(pts, exp))
})

test('expand: expanding of a geom3 produces expected changes to polygons', (t) => {
  const polygonsAsPoints = [
    [[-5, -5, -5], [-5, -5, 15], [-5, 15, 15], [-5, 15, -5]],
    [[15, -5, -5], [15, 15, -5], [15, 15, 15], [15, -5, 15]],
    [[-5, -5, -5], [15, -5, -5], [15, -5, 15], [-5, -5, 15]],
    [[-5, 15, -5], [-5, 15, 15], [15, 15, 15], [15, 15, -5]],
    [[-5, -5, -5], [-5, 15, -5], [15, 15, -5], [15, -5, -5]],
    [[-5, -5, 15], [15, -5, 15], [15, 15, 15], [-5, 15, 15]]
  ]
  const geometry = geom3.fromPoints(polygonsAsPoints)

  const obs = expand({ delta: 2, corners: 'round', segments: 8 }, geometry)
  const pts = geom3.toPoints(obs)
  const exp0 = [
    [-7, -5, -5],
    [-7, -5, 15],
    [-7, 15, 15],
    [-7, 15, -5]
  ]
  const exp61 = [
    [15, -7, 15],
    [16.414213562373096, -6.414213562373095, 15],
    [16, -6.414213562373095, 16]
  ]

  t.is(pts.length, 62)
  t.true(comparePoints(pts[0], exp0))
  t.true(comparePoints(pts[61], exp61))
})

test('expand (options): offsetting of a complex geom2 produces expected offset geom2', (t) => {
  const geometry = geom2.create([
    [[-75.00000, 75.00000], [-75.00000, -75.00000]],
    [[-75.00000, -75.00000], [75.00000, -75.00000]],
    [[75.00000, -75.00000], [75.00000, 75.00000]],
    [[-40.00000, 75.00000], [-75.00000, 75.00000]],
    [[75.00000, 75.00000], [40.00000, 75.00000]],
    [[40.00000, 75.00000], [40.00000, 0.00000]],
    [[40.00000, 0.00000], [-40.00000, 0.00000]],
    [[-40.00000, 0.00000], [-40.00000, 75.00000]],
    [[15.00000, -10.00000], [15.00000, -40.00000]],
    [[-15.00000, -10.00000], [15.00000, -10.00000]],
    [[-15.00000, -40.00000], [-15.00000, -10.00000]],
    [[-8.00000, -40.00000], [-15.00000, -40.00000]],
    [[15.00000, -40.00000], [8.00000, -40.00000]],
    [[-8.00000, -25.00000], [-8.00000, -40.00000]],
    [[8.00000, -25.00000], [-8.00000, -25.00000]],
    [[8.00000, -40.00000], [8.00000, -25.00000]],
    [[-2.00000, -15.00000], [-2.00000, -19.00000]],
    [[-2.00000, -19.00000], [2.00000, -19.00000]],
    [[2.00000, -19.00000], [2.00000, -15.00000]],
    [[2.00000, -15.00000], [-2.00000, -15.00000]]
  ])

  // expand +
  const obs = expand({ delta: 2, corners: 'edge' }, geometry)
  const pts = geom2.toPoints(obs)
  const exp = [
    [-77, -77],
    [-75, -77],
    [75, -77],
    [77, -77],
    [77, -75],
    [77, 75],
    [77, 77],
    [75, 77],
    [40, 77],
    [38, 77],
    [38, 75],
    [38, 2],
    [-38, 2],
    [-38, 75],
    [-37.99999999999999, 77],
    [-40, 77],
    [-75, 77],
    [-77, 77],
    [-77, 75],
    [17, -40],
    [16.999999999999996, -42],
    [15, -42],
    [8, -42],
    [6, -42],
    [6, -40],
    [6, -27],
    [-6, -27],
    [-6, -40],
    [-6.000000000000001, -42],
    [-8, -42],
    [-15, -42],
    [-17, -42],
    [-17, -40],
    [-17, -10],
    [-16.999999999999996, -8],
    [-15, -8],
    [15, -8],
    [17, -8.000000000000004],
    [17, -10],
    [-4, -19],
    [-4, -21],
    [-2, -21],
    [1.9999999999999998, -21],
    [3.9999999999999996, -21],
    [4, -19],
    [4, -15],
    [4, -13],
    [2, -13],
    [-1.9999999999999998, -13],
    [-4, -13],
    [-4, -15],
    [-77, -75]
  ]
  t.is(pts.length, 52)
  t.true(comparePoints(pts, exp))
})
